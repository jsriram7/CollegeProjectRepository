/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package demojavafxapplication;

import ModelClasses.NodeModel;
import ModelClasses.OverallModel;
import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.codehaus.jackson.map.ObjectMapper;

/**
 *
 * @author Welcome
 */
public class ModelConfirmation extends javax.swing.JFrame {

    /**
     * Creates new form ModelConfirmation
     */
    public ModelConfirmation() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        saveModel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Model Details");

        saveModel.setText("Save Model");
        saveModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveModelActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(152, 152, 152)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(150, 150, 150)
                                .addComponent(saveModel)))
                        .addGap(0, 153, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(saveModel)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveModelActionPerformed
        // TODO add your handling code here:
        String workingDir = System.getProperty("user.dir");
        File directory = new File(workingDir + "\\temp\\");
        if (!directory.exists()) {
            System.out.println("creating directory: " + "temp");
            try {
                directory.mkdir();
            } catch (SecurityException se) {
                //handle it
            }
            JOptionPane.showMessageDialog(null, "No nodes present in the mode\nPlease create a node in the model");
        }
        else {
            File[] contents = directory.listFiles();
            OverallModel completeModel = new OverallModel();
            completeModel.setDerivedFrom(null);
            completeModel.setVersion("1");
            List<NodeModel> nodeModelList = new ArrayList<NodeModel>();
            ObjectMapper mapper=null;
            for (File f : contents) {
                System.out.println(f.getAbsolutePath());
                mapper = new ObjectMapper();
                try {
                    NodeModel n = mapper.readValue(new File(f.getAbsolutePath()), NodeModel.class);
                    nodeModelList.add(n);
                } catch (Exception e) {
                }
                
            }
            completeModel.setNodes(nodeModelList);
              try {
            //Object to JSON in file
            File f = new File(workingDir+"\\temp\\OverallModel.json");
            f.getParentFile().mkdirs();
            if(f.exists()){
                System.out.println("file already present");
                f.delete();
                mapper.defaultPrettyPrintingWriter().writeValue(new File(workingDir+"\\temp\\OverallModel.json"), completeModel);
                }
            else{
                System.out.println("new file");
                mapper.defaultPrettyPrintingWriter().writeValue(new File(workingDir+"\\temp\\OverallModel.json"), completeModel);
                    }
            
        } catch (IOException ex) {
            Logger.getLogger(CreateNode.class.getName()).log(Level.SEVERE, null, ex);
        }
              //post client
              CloseableHttpClient httpClient = HttpClients.createDefault();
              HttpPost postRequest = new HttpPost("http://localhost:8080/TraceabilityServicesProvider/Model/createModel");
              //HttpPost postRequest = new HttpPost("http://sase-server3.ssn.net:8080/TraceabilityServicesProvider-0.0.1-SNAPSHOT/Model/createModel");
              StringEntity input = null;
              CloseableHttpResponse response=null;
              try {
                  input = new StringEntity(mapper.writeValueAsString(completeModel));
              } catch (IOException ex) {
                  Logger.getLogger(ModelConfirmation.class.getName()).log(Level.SEVERE, null, ex);
              }
              postRequest.addHeader("content-type", "application/json");
              input.setContentType("application/json");
              postRequest.setEntity(input);
            try {
                response = httpClient.execute(postRequest);
            } catch (IOException ex) {
                Logger.getLogger(ModelConfirmation.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (response.getStatusLine().getStatusCode() == 200) {
            JOptionPane.showMessageDialog(null,"Model saved successfully for the project");
            }
            else if(response.getStatusLine().getStatusCode() == 400){
            JOptionPane.showMessageDialog(null,"Model cannot be saved for the project. Bad Request");
            }
        }
    }//GEN-LAST:event_saveModelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModelConfirmation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModelConfirmation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModelConfirmation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModelConfirmation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModelConfirmation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton saveModel;
    // End of variables declaration//GEN-END:variables
}
