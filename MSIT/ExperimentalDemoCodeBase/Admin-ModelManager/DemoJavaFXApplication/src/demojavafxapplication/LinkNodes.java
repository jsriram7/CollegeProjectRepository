/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package demojavafxapplication;

import ModelClasses.NodeModel;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.codehaus.jackson.map.ObjectMapper;

/**
 *
 * @author Welcome
 */
public class LinkNodes extends javax.swing.JFrame {

    /**
     * Creates new form LinkNodes
     */
    private Map<String, String> modelMap = new HashMap<String, String>();
    public LinkNodes() {
        
        customInitialise();
    }
public void customInitialise()
{
Vector<String> dropDownValues = new <String>Vector();
        
        String workingDir = System.getProperty("user.dir");
        File directory = new File(workingDir + "\\temp\\");
        if (!directory.exists()) {
            System.out.println("creating directory: " + "temp");
            try {
                directory.mkdir();
            } catch (SecurityException se) {
                //handle it
            }
            JOptionPane.showMessageDialog(null, "No nodes present in the mode\nPlease create a node in the model");
        }
        else {
            
            initComponents();
            File[] contents = directory.listFiles();
            for (File f : contents) {
                System.out.println(f.getAbsolutePath());
                ObjectMapper mapper = new ObjectMapper();
                try {
                    NodeModel n = mapper.readValue(new File(f.getAbsolutePath()), NodeModel.class);
                    System.out.println(n.getName());
                    dropDownValues.add(n.getName());
                    modelMap.put(n.getName(), f.getAbsolutePath());
                } catch (Exception e) {
                }
            }
            System.out.println(dropDownValues);
            for (String v : dropDownValues) {
                fromDropDown.addItem(v);
                toDropDown.addItem(v);
            }
                //JComboBox comboBox = new JComboBox(model);
            //this.add(comboBox);
            fromDropDown.setSelectedItem(null);
            toDropDown.setSelectedItem(null);
        }

}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fromDropDown = new javax.swing.JComboBox();
        toDropDown = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        saveLinkButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("From:");

        jLabel2.setText("To:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Link Nodes");

        saveLinkButton.setText("Save");
        saveLinkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveLinkButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveLinkButton)
                    .addComponent(jLabel3)
                    .addComponent(toDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(188, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(41, 41, 41)
                .addComponent(saveLinkButton)
                .addContainerGap(78, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveLinkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveLinkButtonActionPerformed
        // TODO add your handling code here:
        NodeModel fromNode = new NodeModel();
        NodeModel toNode = new NodeModel();
        String fromFilepath = null;
        String toFilepath = null;
        List<String> fromLinkedToNodeList;
        List<String> toLinkedToNodeList;
        ObjectMapper mapper = new ObjectMapper();
        if (!modelMap.isEmpty()) {
            fromFilepath = modelMap.get(fromDropDown.getSelectedItem().toString());
            toFilepath = modelMap.get(toDropDown.getSelectedItem().toString());
            if (fromFilepath != null) {
                try {
                    fromNode = mapper.readValue(new File(fromFilepath), NodeModel.class);
                    toNode = mapper.readValue(new File(toFilepath), NodeModel.class);
                } catch (Exception e) {
                    System.out.println("Exception occurred while fetching object from file");
                }
            } else {
                System.out.println("No file found in the location");
            }
            fromLinkedToNodeList= fromNode.getLinkedTo();
            fromLinkedToNodeList.add(toDropDown.getSelectedItem().toString());
            fromNode.setLinkedTo(fromLinkedToNodeList);
            try {
                mapper.defaultPrettyPrintingWriter().writeValue(new File(fromFilepath), fromNode);
                JOptionPane.showMessageDialog(null,fromDropDown.getSelectedItem().toString() +" " + "is successfully linked to" + " " + toDropDown.getSelectedItem().toString());
            } catch (IOException ex) {
                Logger.getLogger(LinkNodes.class.getName()).log(Level.SEVERE, null, ex);
            }
            toLinkedToNodeList= toNode.getLinkedTo();
            toLinkedToNodeList.add(fromDropDown.getSelectedItem().toString());
            toNode.setLinkedTo(toLinkedToNodeList);
            try {
                mapper.defaultPrettyPrintingWriter().writeValue(new File(toFilepath), toNode);
                JOptionPane.showMessageDialog(null,toDropDown.getSelectedItem().toString() +" " + "is successfully linked to" + " " + fromDropDown.getSelectedItem().toString());
            } catch (IOException ex) {
                Logger.getLogger(LinkNodes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_saveLinkButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LinkNodes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LinkNodes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LinkNodes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LinkNodes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LinkNodes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox fromDropDown;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton saveLinkButton;
    private javax.swing.JComboBox toDropDown;
    // End of variables declaration//GEN-END:variables
}
